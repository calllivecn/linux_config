" All system-wide defaults are set in $VIMRUNTIME/debian.vim and sourced by
" the call to :runtime you can find below.  If you wish to change any of those
" settings, you should do it in this file (/etc/vim/vimrc), since debian.vim
" will be overwritten everytime an upgrade of the vim packages is performed.
" It is recommended to make changes after sourcing debian.vim since it alters
" the value of the 'compatible' option.

" This line should not be removed as it ensures that various options are
" properly set to work with the Vim-related packages available in Debian.
runtime! debian.vim

" Vim will load $VIMRUNTIME/defaults.vim if the user does not have a vimrc.
" This happens after /etc/vim/vimrc(.local) are loaded, so it will override
" any settings in these files.
" If you don't want that to happen, uncomment the below line to prevent
" defaults.vim from being loaded.
" let g:skip_defaults_vim = 1

" Uncomment the next line to make Vim more Vi-compatible
" NOTE: debian.vim sets 'nocompatible'.  Setting 'compatible' changes numerous
" options, so any other options should be set AFTER setting 'compatible'.
"set compatible

" Vim5 and later versions support syntax highlighting. Uncommenting the next
" line enables syntax highlighting by default.
if has("syntax")
  syntax on
endif

" If using a dark background within the editing area and syntax highlighting
" turn on this option as well
"set background=dark

" Uncomment the following to have Vim jump to the last position when
" reopening a file
"if has("autocmd")
"  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
"endif

" Uncomment the following to have Vim load indentation rules and plugins
" according to the detected filetype.
"if has("autocmd")
"  filetype plugin indent on
"endif

" The following are commented out as they cause vim to behave a lot
" differently from regular Vi. They are highly recommended though.
"set showcmd		" Show (partial) command in status line.
"set showmatch		" Show matching brackets.
"set ignorecase		" Do case insensitive matching
"set smartcase		" Do smart case matching
"set incsearch		" Incremental search
"set autowrite		" Automatically save before commands like :next and :make
"set hidden		" Hide buffers when they are abandoned
"set mouse=a		" Enable mouse usage (all modes)

" Source a global configuration file if available
if filereadable("/etc/vim/vimrc.local")
  source /etc/vim/vimrc.local
endif


" My vim config
set tabstop=4
set shiftwidth=4
set autoindent
set number
"set expandtab
set softtabstop=4


"source ~/.vim/test.vim


map! <C-A> <ESC>I

map! <C-E> <ESC>A

"echo "这是一个vim echo 语句"

"set foldmethod=indent
"manual           手工定义折叠
"indent             更多的缩进表示更高级别的折叠
"expr                用表达式来定义折叠
"syntax             用语法高亮来定义折叠
"diff                  对没有更改的文本进行折叠
"marker            对文中的标志折叠



"autocmd BufReadPost *.py,*.c,*.go :set tabstop=4 sw=4
autocmd BufReadPost,BufNewFile *.py,*.c,*.go,*.yml,*.yaml :set expandtab softtabstop=4

" bash
autocmd BufReadPost,BufNewFile *.sh :map! <F5> <ESC>:w<CR>:!bash %<CR>
autocmd BufReadPost,BufNewFile *.sh :map <F5> :w<CR>:!bash %<CR>

" python 
autocmd BufReadPost,BufNewFile *.py :map! <F5> <ESC>:w<CR>:!python3 %<CR>
autocmd BufReadPost,BufNewFile *.py :map <F5> :w<CR>:!python3 %<CR>

" Go lang 
autocmd BufReadPost,BufNewFile *.go :map! <F5> <ESC>:w<CR>:!go run %<CR>
autocmd BufReadPost,BufNewFile *.go :map <F5> :w<CR>:!go run %<CR>

autocmd BufReadPost,BufNewFile *.go :map! <F6> <ESC>:w<CR>:%!gofmt %<CR>
autocmd BufReadPost,BufNewFile *.go :map <F6> :w<CR>:%!gofmt %<CR>



" auto insert file header
function File_sh()
	call setline(1,"#!/bin/bash")
	call setline(2,'# date ' . strftime("%Y-%m-%d %H:%M:%S"))
	call setline(3,'# author calllivecn <c-all@qq.com>')
	:$
endfunction

autocmd BufNewFile *.sh :call File_sh()

function File_py()
	call setline(1,"#!/usr/bin/env py3")
	call setline(2,"#coding=utf-8")
	call setline(3,'# date ' . strftime("%Y-%m-%d %H:%M:%S"))
	call setline(4,'# author calllivecn <c-all@qq.com>')
	:set expandtab softtabstop=4
	:$
endfunction
autocmd BufNewFile *.py :call File_py()

function File_go()
	call setline(1, "/*")
	call setline(2,'# date ' . strftime("%Y-%m-%d %H:%M:%S"))
	call setline(3,'# author calllivecn <c-all@qq.com>')
	call setline(4, "*/")
	:$
endfunction

autocmd BufNewFile *.go :call File_go()
